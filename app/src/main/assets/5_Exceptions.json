{
  "puzzles": [
    {
      "id": 1,
      "title": "What will be the output when you run this code ?",
      "code": "fun main() = runBlocking {\n    val scope = CoroutineScope(EmptyCoroutineContext)\n\n    val job = scope.launch {\n        println(\"throwing exception\")\n        throw IndexOutOfBoundsException()\n    }\n\n    job.join()\n    println(\"main method continues\")\n}",
      "answers": [
        "Compilation error",
        "throwing exception\nmain method continues",
        "throwing exception\nmain method continues\nException in thread \"DefaultDispatcher-worker-1\" java.lang.IndexOutOfBoundsException",
        "throwing exception\nException in thread \"DefaultDispatcher-worker-1\" java.lang.IndexOutOfBoundsException"
      ],
      "correctAnswerNumber": 2,
      "explanation": "Coroutine builders come in two flavors: propagating exceptions automatically (launch) or exposing them to users (async). When these builders are used to create a root coroutine, that is not a child of another coroutine (meaning it's job in the context is not a child of any others), launch{} treats exceptions as uncaught exceptions, similar to Java's Thread.uncaughtExceptionHandler, meaning it will print out the exception, but it doesn't crash. So the Exception will be printed out, and \"main method continues\" as well.",
      "tags": [
        "exceptions"
      ]
    },
    {
      "id": 2,
      "title": "What will be the output when you run this code ?",
      "code": "fun main() = runBlocking {\n    val scope = CoroutineScope(EmptyCoroutineContext)\n\n    val deferred = scope.async {\n        println(\"throwing exception\")\n        throw ArithmeticException()\n    }\n\n    deferred.await()\n    println(\"main method continues\")\n}",
      "answers": [
        "Compilation error",
        "throwing exception\nmain method continues",
        "throwing exception\nmain method continues\nException in thread \"main\" java.lang.ArithmeticException",
        "throwing exception\nException in thread \"main\" java.lang.ArithmeticException",
        "throwing exception\nException in thread \"main\" java.lang.ArithmeticException\nmain method continues"
      ],
      "correctAnswerNumber": 3,
      "explanation": "Coroutine builders come in two flavors: propagating exceptions automatically (launch) or exposing them to users (async). When these builders are used to create a root coroutine, that is not a child of another coroutine (meaning it's job in the context is not a child of any others). Async{} relying on the user to consume the final exception, for example via await, meaning it will cause a crash.So the Exception will be printed out, but not \"main method continues\".",
      "tags": [
        "exceptions"
      ]
    },
    {
      "id": 3,
      "title": "What will be the output when you run this code ?",
      "code": "fun main() = runBlocking {\n    val scope = CoroutineScope(EmptyCoroutineContext)\n\n    scope.launch {\n        println(\"before\")\n        val job = coroutineContext.job\n        CoroutineScope(job).launch {\n            println(\"throwing\")\n            throw IllegalArgumentException(\"this is an exception\")\n        }\n        delay(100)\n        println(\"after\")\n    }\n\n    delay(200)\n    println(\"ending\")\n}",
      "answers": [
        "before\nthrowing\nException in thread \"DefaultDispatcher-worker-1\" java.lang.IllegalArgumentException: this is an exception ...",
        "before\nthrowing\nException in thread \"DefaultDispatcher-worker-2\" java.lang.IllegalArgumentException: this is an exception ...",
        "before\nthrowing\nException in thread \"DefaultDispatcher-worker-1\" java.lang.IllegalArgumentException: this is an exception ...\nending",
        "before\nthrowing\nException in thread \"DefaultDispatcher-worker-2\" java.lang.IllegalArgumentException: this is an exception ...\nending",
        "before\nthrowing\nException in thread \"DefaultDispatcher-worker-1\" java.lang.IllegalArgumentException: this is an exception ...\nafter",
        "before\nthrowing\nException in thread \"DefaultDispatcher-worker-2\" java.lang.IllegalArgumentException: this is an exception ...\nafter",
        "before\nthrowing\nException in thread \"DefaultDispatcher-worker-1\" java.lang.IllegalArgumentException: this is an exception ...\nafter\nending",
        "before\nthrowing\nException in thread \"DefaultDispatcher-worker-2\" java.lang.IllegalArgumentException: this is an exception ...\nafter\nending"
      ],
      "correctAnswerNumber": 2,
      "explanation": "The coroutine where the Exception is thrown is the child of the the enclosing, because it gets it's job in the CoroutineContext. So 'after' won't be printed out, and it will be propagated to worker-1.",
      "tags": [
        "exceptions"
      ]
    },
    {
      "id": 4,
      "title": "What will be the output when you run this code ?",
      "code": "fun main() = runBlocking {\n    val scope = CoroutineScope(EmptyCoroutineContext)\n\n    val deferred = scope.async {\n        println(\"throwing exception from async\")\n        throw ArithmeticException()\n    }\n    try {\n        deferred.await()\n        println(\"Await ended\")\n    } catch (e: ArithmeticException) {\n        println(\"Caught exception :$e\")\n    }\n}",
      "answers": [
        "Compilation error",
        "throwing exception from async\njava.lang.ArithmeticException",
        "throwing exception from async\njava.lang.ArithmeticException\nAwait ended",
        "throwing exception from async\nCaught exception :java.lang.ArithmeticException",
        "throwing exception from async\nAwait ended\nCaught exception :java.lang.ArithmeticException"
      ],
      "correctAnswerNumber": 3,
      "explanation": "The coroutine is a root coroutine, meaning it's job in the context is not a child of any others. Async relies on the user to consume the exception, for example via await or receive. Here the exception will appear in the deferred.await() line, and handled by the try-catch block. The 'Await ended' line won't be reached.",
      "tags": [
        "exceptions"
      ]
    },
    {
      "id": 5,
      "title": "What will be the output when you run this code ?",
      "code": "fun main() = runBlocking {\n    val context1 = createHandler(\"Handler_1\")\n    val context2 = createHandler(\"Handler_2\")\n    val context3 = createHandler(\"Handler_3\")\n\n    val job = CoroutineScope(context1).launch {\n        launch(context2) {\n            launch(context3) {\n                throw IllegalArgumentException()\n            }\n        }\n    }\n\n    job.join()\n}\n\nfun createHandler(msg: String) =\n    CoroutineExceptionHandler { _, exception ->\n        println(\"$msg got $exception\")\n    }",
      "answers": [
        "Compilation error",
        "Handler_1 got java.lang.IllegalArgumentException",
        "Handler_2 got java.lang.IllegalArgumentException",
        "Handler_3 got java.lang.IllegalArgumentException"
      ],
      "correctAnswerNumber": 1,
      "explanation": "All children coroutines (coroutines created in the context of another Job) delegate handling of their exceptions to their parent coroutine, which also delegates to the parent, and so on until the root, so the CoroutineExceptionHandler installed in their context is never used.",
      "tags": [
        "exceptions"
      ]
    },
    {
      "id": 6,
      "title": "What will be the output when you run this code ?",
      "code": "fun main() = runBlocking {\n    val handler = CoroutineExceptionHandler { _, exception ->\n        println(\"CoroutineExceptionHandler got $exception\")\n    }\n    val job = GlobalScope.launch(handler) { \n        throw AssertionError()\n    }\n    val deferred = GlobalScope.async(handler) { \n        throw ArithmeticException() \n    }\n    joinAll(job, deferred)\n}",
      "answers": [
        "Compilation error",
        "CoroutineExceptionHandler got java.lang.AssertionError",
        "CoroutineExceptionHandler got java.lang.ArithmeticException",
        "CoroutineExceptionHandler got java.lang.AssertionError\nCoroutineExceptionHandler got java.lang.ArithmeticException"
      ],
      "correctAnswerNumber": 1,
      "explanation": "Because of the GlobalScope, both coroutines will be root coroutine. The launch{} builder's handler will take effect, so it will be printed out, but async builder always catches all exceptions and represents them in the resulting Deferred object, so CoroutineExceptionHandler has no effect.",
      "tags": [
        "exceptions"
      ]
    },
    {
      "id": 7,
      "title": "What will be the output when you run this code (most probably) ?",
      "code": "fun main() = runBlocking {\n    val context1 = EmptyCoroutineContext + createHandler(\"Handler_1\")\n    val context2 = createHandler(\"Handler_2\")\n\n    val job = CoroutineScope(context1).launch {\n        try {\n            launch(context2) {\n                    throw IllegalArgumentException()\n            }\n        } catch (e: IllegalArgumentException) {\n            println(\"caught IAE: $e\")\n        } catch (e: CancellationException) {\n            println(\"caught CE: $e\")\n        } catch (t: Throwable) {\n            println(\"caught other: $t\")\n        }\n    }\n    job.join()\n}\n\nfun createHandler(msg: String) =\n    CoroutineExceptionHandler { _, exception ->\n        println(\"$msg got $exception\")\n    }",
      "answers": [
        "Compilation error",
        "Handler_1 got java.lang.IllegalArgumentException",
        "Handler_2 got java.lang.IllegalArgumentException",
        "caught CE: kotlinx.coroutines.JobCancellationException",
        "caught CE: kotlinx.coroutines.JobCancellationException\nHandler_1 got java.lang.IllegalArgumentException"
      ],
      "correctAnswerNumber": 1,
      "explanation": "The coroutine with context1 will launch the other coroutine, and then finish. Since it is finished, it won't catch the exception thrown by the inner coroutine, so the handler will catch it.",
      "tags": [
        "exceptions"
      ]
    },
    {
      "id": 8,
      "title": "What will be the output when you run this code (most probably) ?",
      "code": "fun main() = runBlocking {\n    val context1 = EmptyCoroutineContext + createHandler(\"Handler_1\")\n    val context2 = createHandler(\"Handler_2\")\n\n    val job = CoroutineScope(context1).launch {\n        try {\n            launch(context2) {\n                    throw IllegalArgumentException()\n            }\n            yield()\n        } catch (e: IllegalArgumentException) {\n            println(\"caught IAE: $e\")\n        } catch (e: CancellationException) {\n            println(\"caught CE: $e\")\n        } catch (t: Throwable) {\n            println(\"caught other: $t\")\n        }\n    }\n    job.join()\n}\n\nfun createHandler(msg: String) =\n    CoroutineExceptionHandler { _, exception ->\n        println(\"$msg got $exception\")\n    }",
      "answers": [
        "Compilation error",
        "Handler_1 got java.lang.IllegalArgumentException",
        "Handler_2 got java.lang.IllegalArgumentException",
        "caught CE: kotlinx.coroutines.JobCancellationException",
        "caught CE: kotlinx.coroutines.JobCancellationException\nHandler_1 got java.lang.IllegalArgumentException"
      ],
      "correctAnswerNumber": 4,
      "explanation": "It is like the previous, but it has a yield() before the first catch block. Now the inner coroutine will run before the outer finishes, the CancellationException will be caught and printed out. The coroutine is already in cancelled state, so it the outer coroutine's handler will still catch the exception. ",
      "tags": [
        "exceptions"
      ]
    },
    {
      "id": 9,
      "title": "What will be the output when you run this code ?",
      "code": "fun main() = runBlocking {\n    val job = launch {\n        val child = launch {\n            try {\n                delay(Long.MAX_VALUE)\n            } catch (e: Exception) {\n                println(\"caught: $e\")\n            } finally {\n                println(\"Child is cancelled\")\n            }\n        }\n        yield()\n        println(\"Cancelling child\")\n        child.cancel()\n        child.join()\n        yield()\n        println(\"Parent is not cancelled\")\n    }\n    job.join()\n}",
      "answers": [
        "Compilation error",
        "Cancelling child\nChild is cancelled",
        "Cancelling child\nChild is cancelled\nParent is not cancelled",
        "Cancelling child\ncaught: kotlinx.coroutines.JobCancellationException\nChild is cancelled",
        "Cancelling child\ncaught: kotlinx.coroutines.JobCancellationException\nChild is cancelled\nParent is not cancelled"
      ],
      "correctAnswerNumber": 4,
      "explanation": "Coroutines internally use CancellationException for cancellation, these exceptions are ignored by all handlers, so they should be used only as the source of additional debug information, which can be obtained by catch block. When a coroutine is cancelled using Job.cancel, it terminates, but it does not cancel its parent.",
      "tags": [
        "exceptions"
      ]
    },
    {
      "id": 10,
      "title": "What will be the output when you run this code ?",
      "code": "fun main() = runBlocking {\n    val handler = createHandler()\n    val job = GlobalScope.launch(handler) {\n\n        launch {\n            try {\n                delay(Long.MAX_VALUE)\n            } finally {\n              withContext(NonCancellable) {\n                 delay(100)\n                 println(\"First Finished\")\n              }\n            }\n        }\n\n        launch {\n            delay(10)\n            println(\"Second throws an exception\")\n            throw ArithmeticException()\n        }\n    }\n    job.join()\n}\n\nfun createHandler() =\n    CoroutineExceptionHandler { _, exception ->\n        println(\"CoroutineExceptionHandler got $exception\")\n    }",
      "answers": [
        "Compilation error",
        "it never finishes after printing: Second throws an exception",
        "Second throws an exception\nCoroutineExceptionHandler got java.lang.ArithmeticException\nFirst finished",
        "Second throws an exception\nFirst finished\nCoroutineExceptionHandler got java.lang.ArithmeticException"
      ],
      "correctAnswerNumber": 3,
      "explanation": "If a coroutine encounters an exception other than CancellationException, it cancels its parent with that exception. This behaviour cannot be overridden and is used to provide stable coroutines hierarchies for structured concurrency. CoroutineExceptionHandler implementation is not used for child coroutines.The original exception is handled by the parent only when all its children terminate.",
      "tags": [
        "exceptions"
      ]
    },
    {
      "id": 11,
      "title": "What will be the output when you run this code ?",
      "code": "fun main() = runBlocking {\n    val handler = createHandler()\n    val job = GlobalScope.launch(handler) {\n        launch {\n            try {\n                delay(Long.MAX_VALUE)\n            } finally {\n                throw ArithmeticException()\n            }\n        }\n        launch {\n            delay(100)\n            throw IOException()\n        }\n        delay(Long.MAX_VALUE)\n    }\n    job.join()\n}\n\nfun createHandler() =\n    CoroutineExceptionHandler { _, exception ->\n        println(\"CoroutineExceptionHandler got $exception with suppressed ${exception.suppressed.contentToString()}\")\n    }",
      "answers": [
        "Compilation error",
        "CoroutineExceptionHandler got java.io.IOException",
        "CoroutineExceptionHandler got java.io.IOException with suppressed [java.lang.ArithmeticException]",
        "CoroutineExceptionHandler got java.io.ArithmeticException"
      ],
      "correctAnswerNumber": 2,
      "explanation": "When multiple children of a coroutine fail with an exception, the general rule is \"the first exception wins\", so the first exception gets handled. All additional exceptions that happen after the first one are attached to the first exception as suppressed ones.",
      "tags": [
        "exceptions"
      ]
    },
    {
      "id": 12,
      "title": "What will be the output when you run this code ?",
      "code": "fun main() = runBlocking {\n    coroutineScope {\n        val child1 = launch {\n            try {\n                println(\"The first child is sleeping\")\n                delay(Long.MAX_VALUE)\n            } finally {\n                println(\"The first child is cancelled\")\n            }\n        }\n        yield()\n\n        val child2 = launch {\n            println(\"throwing an exception from the second child\")\n            throw IllegalArgumentException()\n        }\n        yield()\n        delay(2000)\n        println(\"canceling first child\")\n        child1.cancel()\n    }\n}",
      "answers": [
        "Compilation error",
        "The first child is sleeping\nthrowing an exception from the second child\nThe first child is cancelled\nException in thread \"main\" java.lang.IllegalArgumentException",
        "The first child is sleeping\nthrowing an exception from the second child\nException in thread \"main\" java.lang.IllegalArgumentException\ncanceling first child\nThe first child is cancelled",
        "nothing"
      ],
      "correctAnswerNumber": 1,
      "explanation": "Cancellation is a bidirectional relationship propagating through the whole hierarchy of coroutines. Here, the second child will throw an IllegalArgumentException and gets canceled, which cancels it's parent, the coroutineScope, which cancels it's other child, the first child.",
      "tags": [
        "exceptions"
      ]
    },
    {
      "id": 13,
      "title": "What will be the output when you run this code ?",
      "code": "fun main() = runBlocking {\n    supervisorScope {\n        val child1 = launch {\n            try {\n                println(\"The first child is sleeping\")\n                delay(Long.MAX_VALUE)\n            } finally {\n                println(\"The first child is cancelled\")\n            }\n        }\n        yield()\n\n        val child2 = launch {\n            println(\"throwing an exception from the second child\")\n            throw IllegalArgumentException()\n        }\n        yield()\n        delay(2000)\n        println(\"canceling first child\")\n        child1.cancel()\n    }\n}",
      "answers": [
        "Compilation error",
        "The first child is sleeping\nthrowing an exception from the second child\nThe first child is cancelled\nException in thread \"main\" java.lang.IllegalArgumentException",
        "The first child is sleeping\nthrowing an exception from the second child\nException in thread \"main\" java.lang.IllegalArgumentException\ncanceling first child\nThe first child is cancelled",
        "nothing"
      ],
      "correctAnswerNumber": 2,
      "explanation": "Instead of coroutineScope, we can use supervisorScope for scoped concurrency. It propagates the cancellation in one direction only and cancels all its children only if it failed itself. It also waits for all children before completion just like coroutineScope does.",
      "tags": [
        "exceptions"
      ]
    },
    {
      "id": 14,
      "title": "What will be the output when you run this code ?",
      "code": "fun main() = runBlocking {\n    val handler = createHandler()\n    supervisorScope {\n        launch(handler) {\n            println(\"Throwing exception\")\n            throw AssertionError()\n        }\n        println(\"The scope is completing\")\n    }\n    println(\"The scope is completed\")\n}\n\nfun createHandler() =\n    CoroutineExceptionHandler { _, exception ->\n        println(\"CoroutineExceptionHandler got $exception\")\n    }",
      "answers": [
        "Compilation error",
        "The scope is completing\nThrowing exception\nCoroutineExceptionHandler got java.lang.AssertionError\nThe scope is completed",
        "The scope is completing\nThrowing exception\nThe scope is completed\nException in thread \"main\" java.lang.AssertionError",
        "The scope is completing\nThrowing exception\nException in thread  \"main\" java.lang.AssertionError"
      ],
      "correctAnswerNumber": 1,
      "explanation": "Another crucial difference between regular and supervisor jobs is exception handling. Every child should handle its exceptions by itself via the exception handling mechanism. This difference comes from the fact that child's failure does not propagate to the parent. It means that coroutines launched directly inside the supervisorScope do use the CoroutineExceptionHandler that is installed in their scope in the same way as root coroutines do.\n If there would be coroutineScope{} instead of supervisorScope, there will be an unhandled Exception in the log.",
      "tags": [
        "exceptions"
      ]
    },
    {
      "id": 15,
      "title": "What will be the output when you run this code ?",
      "code": "fun main() = runBlocking {\n\n    val scope = CoroutineScope(SupervisorJob()).launch {\n        println(\"parent\")\n\n        launch {\n            throw IOException()\n        }\n\n        delay(100)\n        println(\"finished\")\n    }\n\n    delay(500)\n    scope.cancel()\n}",
      "answers": [
        "Compilation error",
        "parent\nStandaloneCoroutine{Active}@730683f2\nException in thread \"DefaultDispatcher-worker-1\" java.io.IOException",
        "parent\nStandaloneCoroutine{Active}@730683f2\nException in thread \"DefaultDispatcher-worker-1\" java.io.IOException\nfinished"
      ],
      "correctAnswerNumber": 1,
      "explanation": "The SupervisorJob is similar to a regular Job with the only exception that cancellation is propagated only downwards. Here the parent job is a SupervisorJob, and in launch{} a new job is created which is the SupervisorJob's child. But, according to this example, it doesn't matter, the parent job still gets canceled by the child's Exception, if the child's job is not a SupervisorJob. See the next question.",
      "tags": [
        "exceptions"
      ]
    },
    {
      "id": 16,
      "title": "What will be the output when you run this code ?",
      "code": "fun main() = runBlocking {\n\n    val scope = CoroutineScope(SupervisorJob()).launch {\n        println(\"parent\")\n\n        launch(SupervisorJob(coroutineContext.job)) {\n            throw IOException()\n        }\n\n        delay(100)\n        println(\"finished\")\n    }\n\n    delay(500)\n    scope.cancel()\n}",
      "answers": [
        "Compilation error",
        "parent\nStandaloneCoroutine{Active}@730683f2\nException in thread \"DefaultDispatcher-worker-1\" java.io.IOException",
        "parent\nStandaloneCoroutine{Active}@730683f2\nException in thread \"DefaultDispatcher-worker-1\" java.io.IOException\nfinished"
      ],
      "correctAnswerNumber": 2,
      "explanation": "It is the same code as in the previous question, but now the child's job is a SupervisorJob. Now it doesn't cancel the parent.",
      "tags": [
        "exceptions"
      ]
    }
  ]
}
