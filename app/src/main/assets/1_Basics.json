{
  "puzzles": [
    {
      "id": 1,
      "title": "What will be the output when you run this code ?",
      "code": "fun main()  {\n    launch {\n        delay(1000L)\n        println(\"World!\")\n    }\n    println(\"Hello\")\n}",
      "answers": [
        "Compilation error",
        "Runtime error",
        "Hello\nWorld!",
        "World!\nHello"
      ],
      "correctAnswerNumber": 0,
      "explanation": "Launch is declared only in the CoroutineScope, it will cause Compilation error: Unresolved reference: launch.",
      "tags": [
        "basics"
      ]
    },
    {
      "id": 2,
      "title": "What will be the output when you run this code ?",
      "code": "fun main() = runBlocking {\n    launch { doWorld() }\n    println(\"Hello\")\n}\n\n\nfun doWorld() {\n    delay(1000L)\n    println(\"World!\")\n}",
      "answers": [
        "Compilation error",
        "Runtime error",
        "Hello\nWorld!",
        "World!\nHello"
      ],
      "correctAnswerNumber": 0,
      "explanation": "delay{} is a suspend function, so the function should be a suspend function.",
      "tags": [
        "basics"
      ]
    },
    {
      "id": 3,
      "title": "What will be the output when you run this code ?",
      "code": "fun main() = runBlocking {\n    repeat(100_000) {\n        launch {\n            delay(5000L)\n            print(\".\")\n        }\n    }\n}",
      "answers": [
        "Compilation error",
        "StackOverflowError",
        "OutOfMemoryError",
        "ThreadDeath",
        "VirtualMachineError",
        "a lot of dots"
      ],
      "correctAnswerNumber": 5,
      "explanation": "Coroutines are less resource-intensive than JVM threads. Code that exhausts the JVM's available memory when using threads can be expressed using coroutines without hitting resource limits. For example, the following code launches 100000 distinct coroutines that each wait 5 seconds and then print a period ('.') while consuming very little memory. If you write the same program using threads (remove runBlocking, replace launch with thread, and replace delay with Thread.sleep), it will likely consume too much memory and throw an out-of-memory error.",
      "tags": [
        "basics"
      ]
    },
    {
      "id": 4,
      "title": "What will be the output when you run this code ?",
      "code": "fun main() = runBlocking {\n    val time = measureTimeMillis {\n        val one = doSomethingUsefulOne()\n        val two = doSomethingUsefulTwo()\n        println(\"The answer is ${one + two}\")\n    }\n    println(\"Completed in $time ms\")\n}\n\nsuspend fun doSomethingUsefulOne(): Int {\n    delay(1000L)\n    println(\"first\")\n    return 13\n}\n\nsuspend fun doSomethingUsefulTwo(): Int {\n    delay(1000L)\n    println(\"second\")\n    return 29\n}",
      "answers": [
        "Compilation error",
        "Runtime error",
        "first\nsecond\nThe answer is 42\nCompleted in 2032 ms",
        "second\nfirst\nThe answer is 42\nCompleted in 2032 ms",
        "The answer is 0\nfirst\nsecond\nCompleted in 2032 ms",
        "The answer is 0\nsecond\nfirst\nCompleted in 2032 ms",
        "Can't tell the order"
      ],
      "correctAnswerNumber": 2,
      "explanation": "The code in the coroutine, just like in the regular code, is sequential by default. No new coroutine has started.",
      "tags": [
        "basics"
      ]
    },
    {
      "id": 5,
      "title": "What is structured concurrency ?",
      "code": "",
      "answers": [
        "I know",
        "I don't know"
      ],
      "correctAnswerNumber": 0,
      "explanation": "\"Structured concurrency\" refers to a way to structure async/concurrent computations so that child operations are guaranteed to complete before their parents, i.e. no child operation is executed outside the scope of a parent operation.",
      "tags": [
        "basics"
      ]
    },
    {
      "id": 6,
      "title": "How many Dispatchers can you have on Android?",
      "code": "",
      "answers": [
        "3",
        "4",
        "5"
      ],
      "correctAnswerNumber": 1,
      "explanation": "Dispatchers.Default: The default threading strategy for starting coroutines, confined to the parent’s context, usually a thread pool of workers.\n\n Dispatchers.IO: Similar to Default, it’s based on the JVM, and is backed by a thread pool to offload IO-related tasks.\n\n Dispatchers.Main: The main thread dispatcher, connected to the thread, which operates with UI objects.\n\n Dispatchers.Unconfined: The name states it, it’s unconfined, and it will run on whichever thread is currently using it ",
      "tags": [
        "basics"
      ]
    }
  ]
}