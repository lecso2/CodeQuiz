{
  "puzzles": [
    {
      "id": 1,
      "title": "What will be the output when you run this code ?",
      "code": "fun main() = runBlocking {\n\n    val job = launch(Dispatchers.Default) {\n        var count = 0\n\n        while (count < 5) {\n            Thread.sleep(500)\n            print(count)\n            count++\n        }\n    }\n\n    delay(1000L)\n    println(\"main: I'm tired of waiting!\")\n    job.cancelAndJoin()\n    println(\"main: Now I can quit.\")\n}\n\nfun print(count: Int) = println(\"job: I'm sleeping $count ...\")",
      "answers": [
        "Compilation error",
        "Runtime error",
        "job: I'm sleeping 0 ...\njob: I'm sleeping 1 ...\nmain: I'm tired of waiting!\nmain: Now I can quit.",
        "job: I'm sleeping 0 ...\njob: I'm sleeping 1 ...\njob: I'm sleeping 2 ...\nmain: I'm tired of waiting!\nmain: Now I can quit.",
        "job: I'm sleeping 0 ...\njob: I'm sleeping 1 ...\njob: I'm sleeping 2 ...\njob: I'm sleeping 3 ...\nmain: I'm tired of waiting!\nmain: Now I can quit.",
        "job: I'm sleeping 0 ...\njob: I'm sleeping 1 ...\njob: I'm sleeping 2 ...\nmain: I'm tired of waiting!\njob: I'm sleeping 3 ...\njob: I'm sleeping 4 ...\nmain: Now I can quit."
      ],
      "correctAnswerNumber": 5,
      "explanation": "Coroutine cancellation is cooperative. A coroutine code has to cooperate to be cancellable. All the suspending functions in kotlinx.coroutines are cancellable. They check for cancellation of coroutine and throw CancellationException when cancelled. However, if a coroutine is working in a computation and does not check for cancellation, then it cannot be cancelled, like in the example above.\n\nThere are two approaches to making computation code cancellable. The first one is to periodically invoke a suspending function that checks for cancellation. There is a yield function that is a good choice for that purpose. The other one is to explicitly check the cancellation status.",
      "tags": [
        "cancelling"
      ],
      "comment:": "cancelling is cooperative"
    },
    {
      "id": 2,
      "title": "What will be the output when you run this code?",
      "code": "fun main() = runBlocking {\n\n    val job = launch(Dispatchers.Default) {\n        var count = 0\n\n        while (count < 5) {\n            delay(500)\n            print(count)\n            count++\n        }\n    }\n\n    delay(1000L)\n    println(\"main: I'm tired of waiting!\")\n    job.cancelAndJoin()\n    println(\"main: Now I can quit.\")\n}\n\nfun print(count: Int) = println(\"job: I'm sleeping $count ...\")",
      "answers": [
        "Compilation error",
        "Runtime error",
        "job: I'm sleeping 0 ...\njob: I'm sleeping 1 ...\njob: I'm sleeping 2 ...\nmain: I'm tired of waiting!\nmain: Now I can quit.",
        "job: I'm sleeping 0 ...\njob: I'm sleeping 1 ...\njob: I'm sleeping 2 ...\nmain: I'm tired of waiting!\njob: I'm sleeping 3 ...\njob: I'm sleeping 4 ...\nmain: Now I can quit."
      ],
      "correctAnswerNumber": 2,
      "explanation": "delay{} is a suspending function, so it will check for cancellation and throw CancellationException as soon as main invokes job.cancel.\nThere is also a Job extension function cancelAndJoin that combines cancel and join invocations.",
      "tags": [
        "cancelling"
      ],
      "comment:": "cancel"
    },
    {
      "id": 3,
      "title": "What will be the output when you run this code?",
      "code": "fun main() = runBlocking {\n\n    val job = launch(Dispatchers.Default) {\n        var count = 0\n\n        while (count < 5 || isActive) {\n            Thread.sleep(500)\n            print(count)\n            count++\n        }\n    }\n\n    delay(1000L)\n    println(\"main: I'm tired of waiting!\")\n    job.cancelAndJoin()\n    println(\"main: Now I can quit.\")\n}\n\nfun print(count: Int) = println(\"job: I'm sleeping $count ...\")",
      "answers": [
        "Compilation error",
        "Runtime error",
        "job: I'm sleeping 0 ...\njob: I'm sleeping 1 ...\njob: I'm sleeping 2 ...\nmain: I'm tired of waiting!\nmain: Now I can quit.",
        "job: I'm sleeping 0 ...\njob: I'm sleeping 1 ...\njob: I'm sleeping 2 ...\nmain: I'm tired of waiting!\njob: I'm sleeping 3 ...\njob: I'm sleeping 4 ...\nmain: Now I can quit."
      ],
      "correctAnswerNumber": 3,
      "explanation": "There are two approaches to making computation code cancellable. The first one is to periodically invoke a suspending function that checks for cancellation. There is a yield function that is a good choice for that purpose. The other one is to explicitly check the cancellation status, like in this example. But since it also checks that the count variable should be smaller than five, the coroutine runs until both condition is fulfilled. Cancelled is just a state, it doesn't cancel the coroutine right away if the code is not cooperative.",
      "tags": [
        "cancelling"
      ],
      "comment:": "isActive"
    },
    {
      "id": 4,
      "title": "What will be the output when you run this code?",
      "code": "fun main() = runBlocking {\n\n    val job = launch {\n        try {\n            repeat(1000) { i ->\n                print(i)\n                delay(500L)\n            }\n        } finally {\n            println(\"job: finally\")\n        }\n    }\n\n    delay(1300L)\n    println(\"main: I'm tired of waiting!\")\n    job.cancelAndJoin()\n    println(\"main: Now I can quit.\")\n}\n\nfun print(count: Int) = println(\"job: I'm sleeping $count ...\")",
      "answers": [
        "Compilation error",
        "Runtime error",
        "job: I'm sleeping 0 ...\njob: I'm sleeping 1 ...\njob: I'm sleeping 2 ...\nmain: I'm tired of waiting!\nmain: Now I can quit.",
        "job: I'm sleeping 0 ...\njob: I'm sleeping 1 ...\njob: I'm sleeping 2 ...\nmain: I'm tired of waiting!\njob: finally\nmain: Now I can quit.",
        "job: I'm sleeping 0 ...\njob: I'm sleeping 1 ...\njob: I'm sleeping 2 ...\nmain: I'm tired of waiting!\nmain: Now I can quit.\njob: finally"
      ],
      "correctAnswerNumber": 3,
      "explanation": "Cancellable suspending functions throw CancellationException on cancellation which can be handled in the usual way. For example, try {...} finally {...} expression and Kotlin use function execute their finalization actions normally when a coroutine is cancelled. Both join and cancelAndJoin wait for all finalization actions to complete.",
      "tags": [
        "cancelling"
      ],
      "comment:": "finally"
    },
    {
      "id": 5,
      "title": "What will be the output when you run this code?",
      "code": "fun main() = runBlocking {\n    \n    val job = launch {\n        try {\n            println(\"job is working\")\n            delay(5000L)\n        } finally {\n            closeResources()\n        }\n    }\n    \n    delay(1300L)\n    println(\"main: I'm tired of waiting!\")\n    job.cancelAndJoin()\n    println(\"main: Now I can quit.\")\n}\n\nsuspend fun closeResources() = withContext(Dispatchers.IO) {\n    println(\"closing resources\")\n}",
      "answers": [
        "Compilation error",
        "Runtime error",
        "job is working\nmain: I'm tired of waiting!\nclosing resources\nmain: Now I can quit.",
        "job is working\nmain: I'm tired of waiting!\nmain: Now I can quit."
      ],
      "correctAnswerNumber": 3,
      "explanation": "Any attempt to use a suspending function in the finally block causes CancellationException, because the coroutine running this code is cancelled. This means that they will be cancelled as well. This is why this code won't print \"closing resources\".\n\nUsually, this is not a problem, since all well-behaving closing operations (closing a file, cancelling a job, or closing any kind of a communication channel) are usually non-blocking and do not involve any suspending functions. However, in the rare case when you need to suspend in a cancelled coroutine you can wrap the corresponding code in withContext(NonCancellable) {...} using withContext function and NonCancellable context.",
      "tags": [
        "cancelling"
      ],
      "comment:": "suspending in finally"
    },
    {
      "id": 6,
      "title": "What will be the output when you run this code?",
      "code": "fun main() = runBlocking {\n    \n    val job = launch {\n        try {\n            println(\"job is working\")\n            delay(5000L)\n        } finally {\n            closeResources()\n        }\n    }\n    \n    delay(1300L)\n    println(\"main: I'm tired of waiting!\")\n    job.cancelAndJoin()\n    println(\"main: Now I can quit.\")\n}\n\nsuspend fun closeResources() = withContext(NonCancellable) {\n    println(\"closing resources\")\n}",
      "answers": [
        "Compilation error",
        "Runtime error",
        "job is working\nmain: I'm tired of waiting!\nclosing resources\nmain: Now I can quit.",
        "job is working\nmain: I'm tired of waiting!\nmain: Now I can quit."
      ],
      "correctAnswerNumber": 2,
      "explanation": "In the rare case when you need to suspend in a cancelled coroutine you can wrap the corresponding code in withContext(NonCancellable) {...} using withContext function and NonCancellable context as this example shows.",
      "tags": [
        "cancelling"
      ],
      "comment:": "suspending in finally with "
    },
    {
      "id": 7,
      "title": "What will be the output when you run this code?",
      "code": "fun main() = runBlocking {\n\n    withTimeout(1300L) {\n        repeat(5) { i ->\n            print(i)\n            delay(500L)\n        }\n    }\n}\n\nfun print(count: Int) = println(\"job: I'm sleeping $count ...\")",
      "answers": [
        "Compilation error",
        "Runtime error",
        "I'm sleeping 0 ...\nI'm sleeping 1 ...\nI'm sleeping 2 ...",
        "I'm sleeping 0 ...\nI'm sleeping 1 ...\nI'm sleeping 2 ...\nException in thread \"main\" TimeoutCancellationException: Timed out waiting for 1300 ms"
      ],
      "correctAnswerNumber": 3,
      "explanation": "The TimeoutCancellationException that is thrown by withTimeout is a subclass of CancellationException. We have not seen its stack trace printed on the console before. That is because inside a cancelled coroutine CancellationException is considered to be a normal reason for coroutine completion. However, in this example we have used withTimeout right inside the main function.",
      "tags": [
        "cancelling"
      ],
      "comment:": "timeout"
    },
    {
      "id": 8,
      "title": "What will be the output when you run this code?",
      "code": "fun main() = runBlocking {\n    val result = withTimeoutOrNull(1300L) {\n        repeat(5) { i ->\n            print(i)\n            delay(500L)\n        }\n        \"Done\"\n    }\n    println(\"Result is $result\")\n}",
      "answers": [
        "Compilation error",
        "Runtime error",
        "I'm sleeping 0 ...\nI'm sleeping 1 ...\nI'm sleeping 2 ...\nResult is null",
        "I'm sleeping 0 ...\nI'm sleeping 1 ...\nI'm sleeping 2 ...\nResult is Done"
      ],
      "correctAnswerNumber": 2,
      "explanation": "Since cancellation is just an exception, all resources are closed in the usual way. You can wrap the code with timeout in a try {...} catch (e: TimeoutCancellationException) {...} block if you need to do some additional action specifically on any kind of timeout or use the withTimeoutOrNull function that is similar to withTimeout but returns null on timeout instead of throwing an exception. The code will get cancelled before it produces the \"Done\" result",
      "tags": [
        "cancelling"
      ],
      "comment:": "timeout with result"
    },
    {
      "id": 9,
      "title": "What will be the output when you run this code ?",
      "code": "var acquired = 0\n\nclass Resource {\n    init { acquired++ }\n    fun close() { acquired-- }\n}\n\nfun main() {\n    runBlocking {\n        repeat(100_000) {\n            launch {\n                val resource = withTimeout(60) {\n                    delay(59)\n                    Resource()\n                }\n                resource.close()\n            }\n        }\n    }\n\n    println(acquired) \n}",
      "answers": [
        "Compilation error",
        "Runtime error",
        "0",
        "a negative number",
        "a positive number"
      ],
      "correctAnswerNumber": 4,
      "explanation": "The timeout event in withTimeout is asynchronous with respect to the code running in its block and may happen at any time, even right before the return from inside of the timeout block. Here the timeout may happen before the return but after the Resource is created, and it cancels the whole scope so the close() won't run. ",
      "tags": [
        "cancelling"
      ],
      "comment:": "Asynchronous timeout and resources"
    },
    {
      "id": 10,
      "title": "What will be the output when you run this code (approximately) ?",
      "code": "var acquired = 0\n\nclass Resource {\n    init { acquired++ }\n    fun close() { acquired-- }\n}\n\nfun main() {\n    runBlocking {\n        repeat(100_000) {\n            launch {\n                var resource: Resource? = null\n                try {\n                    withTimeout(60) {\n                        delay(59)\n                        resource = Resource()\n                    }\n                } finally {\n                    resource?.close()\n                }\n            }\n        }\n    }\n    println(acquired)\n}",
      "answers": [
        "Compilation error",
        "Runtime error",
        "0",
        "a negative number",
        "a positive number"
      ],
      "correctAnswerNumber": 2,
      "explanation": "The timeout event in withTimeout is asynchronous with respect to the code running in its block and may happen at any time, even right before the return from inside of the timeout block. To workaround this problem you can store a reference to the resource in the variable as opposed to returning it from the withTimeout block.",
      "tags": [
        "cancelling"
      ],
      "comment:": "Asynchronous timeout and resources II."
    }
  ]
}